/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        ArrayList<TreeNode> p_list = new ArrayList<>();
        ArrayList<TreeNode> q_list = new ArrayList<>() ;
        
        if(nodeToRootPath(root, p , p_list) && nodeToRootPath(root, q , q_list)){
        
            int i = p_list.size()-1;
            int j = q_list.size()-1;
            while(i>=0 && j>=0){
                if(p_list.get(i)== q_list.get(j)){
                    i--;j--;
                }else{
                    break;
                }
            }
            return p_list.get(i+1);
            
            
            }else{
            return null ;
        } 
        
        
        
        
        
        
    }
    public boolean nodeToRootPath(TreeNode root , TreeNode p , ArrayList<TreeNode>p_list ){

        if(root==null){
            return false ;
        }
        if(root==p){
            p_list.add(p);
            return true;
        }
        
        boolean hasLeft  =  nodeToRootPath(root.left, p , p_list);
        boolean hasRight  =  nodeToRootPath(root.right , p  , p_list) ;
        
        if(hasLeft || hasRight){
                p_list.add(root);
                return true ;
        }
        
        return false ; 
        
        
    }
}
