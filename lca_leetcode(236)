class Solution {
	public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
		List<TreeNode> path1 = new ArrayList<>();
		List<TreeNode> path2 = new ArrayList<>();

		nodeToRootPath(root, p, path1);
		nodeToRootPath(root, q, path2);

        int p1 = path1.size() - 1, p2 = path2.size() - 1;
		while (p1 >= 0 && p2 >= 0) {
			if (path1.get(p1) == path2.get(p2)) {
				p1--;
				p2--;
			} else {
				break;
			}
		}

		return path1.get(p1 + 1);
	}

	public boolean nodeToRootPath(TreeNode root, TreeNode p, List<TreeNode> p1) {
		if (root == null)
			return false;

		if (root == p) {
			p1.add(root);
			return true;
		}
		boolean hasLeft = nodeToRootPath(root.left, p, p1);
		if (hasLeft) {
			p1.add(root);
			return true;
		}
		boolean hasRight = nodeToRootPath(root.right, p, p1);
		if (hasRight) {
			p1.add(root);
			return true;
		}

		return hasLeft || hasRight;
	}
}
